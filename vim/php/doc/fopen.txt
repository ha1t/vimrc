fopen -- ファイルまたは URL をオープンする

  resource fopen(string filename, string mode [, bool use_include_path [, resource context]])~

|fopen| は、{filename}
で指定されたリソースをストリームに結び付けます。

{filename} {filename} が "スキーム://..." の形式である場合、
それは URL とみなされ、PHP はそのプロトコルのハンドラ
(ラッパーともいいます) を探します。
もしもそのプロトコルに対するラッパが登録されていない場合、
PHP はスクリプトに潜在的な問題があることを示す NOTICE
を発行したうえで、 {filename}
を通常のファイルとみなしてオープンすることを試みます。

PHP は、{filename}
がローカルのファイルを示しているとみなすと、
そのファイルへのストリームをオープンします。
そのファイルはPHPからアクセスできるものでなければなりません。
ファイルのパーミッションが (パラメータで指定された)
アクセスを許可されているかどうか確認する必要があります。
セーフモード または open_basedir
を有効にしている場合は更なるアクセス制限が加えられることがあります。

{filename} が登録されているプロトコルを示していると PHP
が判断し、かつそのプロトコルがネットワーク URL
として登録されていれば、 PHP は allow_url_fopen
が有効となっているかどうかチェックします。
もしこれがオフになっていると、PHP は warning を発行し
fopen は失敗します。

サポートされているプロトコルのリストは にあります。
いくつかのプロトコル (wrappersにも関連する) は context
かつ/または php.ini のオプションをサポートします。
使用するプロトコルについてセットされるオプションのリストについては、
それぞれのページを見てください (例えば、 php.ini 上の
user_agent の値は http ラッパーが使用します)。

Windows
環境では、ファイルパスで用いる全てのバックスラッシュを
エスケープするかフォワードスラッシュを使用することに注意してください。

<?php >
  $handle = fopen("c:\\data\\info.txt", "r");
?>

{mode} パラメータ {mode} は、
そのストリームに要するアクセス形式を指定します。
この指定は、下表のうちのどれかとなります。 |fopen|
で使用可能な {mode} のリスト {mode} 説明 'r'
読み込みのみでオープンします。ファイルポインタをファイルの先頭に置きます。
'r+' 読み込み／書き出し用にオープンします。
ファイルポインタをファイルの先頭に置きます。 'w'
書き出しのみでオープンします。ファイルポインタをファイルの先頭に置き、
ファイルサイズをゼロにします。ファイルが存在しない場合には、
作成を試みます。 'w+'
読み込み／書き出し用でオープンします。
ファイルポインタをファイルの先頭に置き、
ファイルサイズをゼロにします。
ファイルが存在しない場合には、作成を試みます。 'a'
書き出し用のみでオープンします。ファイルポインタをファイルの終端に置きます。
ファイルが存在しない場合には、作成を試みます。 'a+'
読み込み／書き出し用でオープンします。
ファイルポインタをファイルの終端に置きます。
ファイルが存在しない場合には、作成を試みます。 'x'
書き込みのみでオープンします。ファイルポインタをファイルの先頭に置きます。
ファイルが既に存在する場合には |fopen| は失敗し、
E_WARNING レベルのエラーを発行します。
ファイルが存在しない場合には新規作成を試みます。
これは open(2) システムコールにおける O_EXCL|O_CREAT
フラグの指定と等価です。
このオプションはPHP4.3.2以降でサポートされ、また、
ローカルファイルに対してのみ有効です。 'x+'
読み込み／書き出し用でオープンします。ファイルポインタをファイルの先頭に置きます。
ファイルが既に存在する場合には |fopen| は失敗し、
E_WARNING レベルのエラーを発行します。 これは open(2)
システムコールにおける O_EXCL|O_CREAT
フラグの指定と等価です。 このオプションは PHP 4.3.2
以降でサポートされ、また、
ローカルファイルに対してのみ有効です。

オペレーティングシステムファミリが異なると行末も異なります。
テキストファイルに書き出し、そこに改行を加えたいとき、
オペレーティングシステムにあわせた正しい改行コードを使用する必要があります。
Unix ベースのシステムでは改行に \n
キャラクタを使用します。 Windows ベースのシステムでは
\r\n を使用します。
マッキントッシュベースのシステムでは \r
を使用します。

間違った改行コードでファイルに書き込むと、
他のアプリケーション上でそのファイルを開いた際に変な風に見えてしまいます。

Windows上では、\nを\r\nに透過的に変換する
text-mode変換フラグ('t')が提供されます。
それに対し、'b'を使って強制的にバイナリモードにすることもできます。
その場合データの変換はされません。
このフラグを使用するには、'b' または 't'を
{mode}引数の最後に追加してください。

デフォルトの変換モードは SAPI と使用している PHP
のバージョンによって異なります。
したがって、互換性の意味から、常に適切なフラグを指定することが推奨されます。
plain-text ファイルを使用する場合には 't'
モードを指定すべきであり、 改行に \n を使用すると、
メモ帳のようなアプリケーションで読めることを期待できます。
それ以外のケースでは 'b' を使うべきです。

バイナリファイルを扱っている際に 'b'
フラグを指定しなかった場合、
画像ファイルが壊れたり、\r\n
キャラクタがおかしくなる等の問題を抱えてしまうでしょう。

互換性維持のために、|fopen|
でファイルをオープンする際は 常に 'b'
フラグを指定することが強く推奨されます。

互換性維持のために、't'
モードを使用または依存しているコードを書き直し、
正しい改行コードと 'b'
モードを代わりに使用することが、 強く推奨されます。

{use_include_path}
オプションの３番目の引数{use_include_path}に'1'又は TRUE
を設定することにより、include_path
のファイルの検索も行うこともできます。

{context} コンテキストのサポートは、 PHP 5.0.0
で追加されました。contexts の説明に関しては、
を参照してください。

成功した場合にファイルポインタリソース、エラー時に
FALSE を返します。

オープンが失敗するとこの関数は FALSE を返し、 E_WARNING
レベルのエラーを発行します。 @ を使ってこの warning
を抑制することもできます。

バージョン 説明 4.3.2 PHP 4.3.2
以降では、バイナリモードとテキストモードを区別する全ての
プラットフォームにおいて、デフォルトのモードはバイナリにセットされます。
アップグレード後にスクリプトに問題が起きた場合は、
以上に述べたスクリプトの互換性を確保するまでの次善策として、
't' フラグを試してみてください。 4.3.2 'x' および 'x+'
が追加されました。

|fopen| の例

<?php >
  $handle = fopen("/home/rasmus/file.txt", "r");
  $handle = fopen("/home/rasmus/file.gif", "wb");
  $handle = fopen("http://www.example.com/", "r");
  $handle = fopen("ftp://user:password@example.com/somefile.txt", "w");
?>





IIS のような、いくつかの標準に 対応してない Web
サーバは、PHP
に警告を発生させるような手順でデータを送信します。
このようなサーバを使用する場合は、 error_reporting
を警告を発生しないレベルまで小さくする必要があります。
PHP 4.3.7 以降では、https://
ラッパーでストリームをオープンする際に バグがある IIS
サーバソフトウエアを検出することができ、この警告を抑制することができます。
あなたが ssl:// ソケットを作成するために |fsockopen|
を使用している場合、
自らこの警告を検出し、抑制する必要があります。

セーフモード が有効の場合、PHP は、
操作を行うディレクトリが、実行するスクリプトと同じ
UID (所有者)を有しているか どうかを確認します。

ファイルの読みこみ・書きこみ時に問題が発生し、
サーバーモジュール版のPHPを使用している場合、
使用するファイル・ディレクトリがサーバプロセスからアクセス可能かどうかを確認してください。

|fclose| |fgets| |fread| |fwrite| |fsockopen| |file| |file_exists|
|is_readable| |stream_set_timeout| |popen| |stream_context_create|

vim:ft=help:
