db2_exec -- SQL 文を直接実行する

  resource db2_exec(resource connection, string statement [, array options])~

SQL 文を直接実行します。

PHP 変数の内容を SQL
文に組み込みたい場合は、この関数を使用すると
典型的なセキュリティ上の問題を引き起こしかねないことを知っておきましょう。
|db2_prepare| をコールして入力パラメータつきの SQL
文を準備することを検討してください。その後で
|db2_execute| をコールして入力値を渡すことで、 SQL
インジェクション攻撃を避けることができます。

同じ SQL
文にさまざまなパラメータを指定して何度も発行する場合は、
|db2_prepare| および |db2_execute| の使用を検討してください。
これにより、データベースサーバが実行計画を再利用することができて
データベースアクセスの効率が向上します。

{connection} |db2_connect| あるいは |db2_pconnect|
が返した有効なデータベース接続リソース。

{statement} SQL
文。パラメータマーカを含めることはできません。

{options} 文のオプションを含む連想配列。
データベースサーバがその機能をサポートしている場合に、
このパラメータを使用してスクロール可能なカーソルの使用を
要求することができます。 {cursor} DB2_FORWARD_ONLY を渡すと、
この SQL
文で前進のみのカーソルを使用することを要求します。
これはデフォルトのカーソル型であり、すべてのデータベースサーバで
サポートされています。また、スクロール可能なカーソルに比べて
非常に高速になります。

DB2_SCROLLABLE を渡すと、 この SQL
文でスクロール可能なカーソルを使用することを要求します。
このカーソル型を使用すると、データベースサーバから
行の並び順を気にせずにデータを取得できるようになります。
しかし、この型は DB2
サーバでしかサポートされておらず、
前進のみのカーソルに比べて非常に低速です。

SQL 文の実行に成功した場合にステートメントリソース、
SQL 文の実行に失敗した場合に FALSE を返します。

|db2_exec| でのテーブルの作成 以下の例では、|db2_exec|
を使用して テーブルを作成する DDL 文を発行します。

<?php >
  $conn = db2_connect($database, $user, $password);
  
  // テストテーブルを作成します
  $create = 'CREATE TABLE animals (id INTEGER, breed VARCHAR(32),
      name CHAR(16), weight DECIMAL(7,2))';
  $result = db2_exec($conn, $create);
  if ($result) {
      print "テーブルの作成に成功しました。\n";
  }
  
  // テストテーブルに値を投入します
  $animals = array(
      array(0, 'cat', 'Pook', 3.2),
      array(1, 'dog', 'Peaches', 12.3),
      array(2, 'horse', 'Smarty', 350.0),
      array(3, 'gold fish', 'Bubbles', 0.1),
      array(4, 'budgerigar', 'Gizmo', 0.2),
      array(5, 'goat', 'Rickety Ride', 9.7),
      array(6, 'llama', 'Sweater', 150)
  );
  
  foreach ($animals as $animal) {
      $rc = db2_exec($conn, "INSERT INTO animals (id, breed, name, weight)
        VALUES ({$animal[0]}, '{$animal[1]}', '{$animal[2]}', {$animal[3]})");
      if ($rc) {
          print "Insert... ";
      }
  }
?>

上の例の出力は以下となります。

  テーブルの作成に成功しました。
  Insert... Insert... Insert... Insert... Insert... Insert... Insert...

スクロール可能なカーソルでの SELECT 文の実行
以下の例では、|db2_exec| で発行された SQL
文にスクロール可能なカーソルを要求する方法を説明します。

<?php >
  $conn = db2_connect($database, $user, $password);
  $sql = "SELECT name FROM animals
      WHERE weight < 10.0
      ORDER BY name";
  if ($conn) {
      require_once('prepare.inc');
      $stmt = db2_exec($conn, $sql, array('cursor' => DB2_SCROLLABLE));
      while ($row = db2_fetch_array($stmt)) {
          print "$row[0]\n";
      }
  } 
?>

上の例の出力は以下となります。

  Bubbles
  Gizmo
  Pook
  Rickety Ride

XML データを SQL の結果セットとして返す 次の例は、XML
カラムに格納されたデータの扱い方を、SAMPLE
データベースを用いて説明するものです。ごく単純な
SQL/XML を使用して、この例では XML
ドキュメントのいくつかのノードを みなさんおなじみの
SQL 結果セット形式で返します。

<?php >
  $conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");
  
  $query = 'SELECT * FROM XMLTABLE(
      XMLNAMESPACES (DEFAULT \'http://posample.org\'),
      \'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo\'
      COLUMNS
      "CID" VARCHAR (50) PATH \'@Cid\',
      "NAME" VARCHAR (50) PATH \'name\',
      "PHONE" VARCHAR (50) PATH \'phone [ @type = "work"]\'
      ) AS T
      WHERE NAME = \'Kathy Smith\'
      ';
  $stmt = db2_exec($conn, $query);
  
  while($row = db2_fetch_object($stmt)){
      printf("$row->CID     $row->NAME     $row->PHONE\n");
  }
  db2_close($conn);
?>

上の例の出力は以下となります。

  1000     Kathy Smith     416-555-1358
  1001     Kathy Smith     905-555-7258

XML データの "JOIN" 次の例は、SAMPLE データベースの 2
つの異なる XML
カラムに格納されたドキュメントを使用します。 まず、2
つの異なるカラムの XML ドキュメントをもとにして 2
つのテンポラリテーブルを作成します。
そして特定の顧客の配送情報を SQL
結果セットで返します。

<?php >
  $conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");
  
  $query = '
      SELECT A.CID, A.NAME, A.PHONE, C.PONUM, C.STATUS
      FROM
      XMLTABLE(
      XMLNAMESPACES (DEFAULT \'http://posample.org\'),
      \'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo\'
      COLUMNS
      "CID" BIGINT PATH \'@Cid\',
      "NAME" VARCHAR (50) PATH \'name\',
      "PHONE" VARCHAR (50) PATH \'phone [ @type = "work"]\'
      ) as A,
      PURCHASEORDER AS B,
      XMLTABLE (
      XMLNAMESPACES (DEFAULT \'http://posample.org\'),
      \'db2-fn:xmlcolumn("PURCHASEORDER.PORDER")/PurchaseOrder\'
      COLUMNS
      "PONUM"  BIGINT PATH \'@PoNum\',
      "STATUS" VARCHAR (50) PATH \'@Status\'
      ) as C
      WHERE A.CID = B.CUSTID AND
      B.POID = C.PONUM AND
      A.NAME = \'Kathy Smith\'
  ';
      
  $stmt = db2_exec($conn, $query);
      
  while($row = db2_fetch_object($stmt)){
      printf("$row->CID     $row->NAME     $row->PHONE     $row->PONUM     $row->STATUS\n");
  }
      
  db2_close($conn);
?>

上の例の出力は以下となります。

  1001     Kathy Smith     905-555-7258     5002     Shipped

大きな XML ドキュメントの一部を SQL データとして返す
次の例は、SAMPLE データベースのドキュメント
PRODUCT.DESCRIPTION の一部を使用します。これは、商品の説明
(XML データ) および価格情報 (SQL データ) を含む XML
ドキュメントを返します。

<?php >
  $conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");
  
  $query = '
  SELECT
  XMLSERIALIZE(
  XMLQUERY(\'
      declare boundary-space strip;
      declare default element namespace "http://posample.org";
      <promoList> {
      for $prod in $doc/product
      where $prod/description/price < 10.00
      order by $prod/description/price ascending
      return(
          <promoitem> {
          $prod,
          <startdate> {$start} </startdate>,
          <enddate> {$end} </enddate>,
          <promoprice> {$promo} </promoprice>
          } </promoitem>
      )
      } </promoList>
  \' passing by ref DESCRIPTION AS "doc",
  PROMOSTART as "start",
  PROMOEND as "end",
  PROMOPRICE as "promo"
  RETURNING SEQUENCE)
  AS CLOB (32000))
  AS NEW_PRODUCT_INFO
  FROM PRODUCT
  WHERE PID = \'100-100-01\'
  ';
  
  $stmt = db2_exec($conn, $query);
  
  while($row = db2_fetch_array($stmt)){
      printf("$row[0]\n");
  }
  db2_close($conn);
?>
?>

上の例の出力は以下となります。

  <promoList xmlns="http://posample.org">
      <promoitem>
      <product pid="100-100-01">
          <description>
              <name>Snow Shovel, Basic 22 inch</name>
              <details>Basic Snow Shovel, 22 inches wide, straight handle with D-Grip</details>
              <price>9.99</price>
              <weight>1 kg</weight>
          </description>
      </product>
      <startdate>2004-11-19</startdate>
      <enddate>2004-12-19</enddate>
      <promoprice>7.25</promoprice>
      </promoitem>
  </promoList>



|db2_execute| |db2_prepare|

vim:ft=help:
