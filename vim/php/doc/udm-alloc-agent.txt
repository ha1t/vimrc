udm_alloc_agent -- mnoGoSearch セッションを確保する

  resource udm_alloc_agent(string dbaddr [, string dbmode])~

mnoGoSearch セッションを割り当てます。

{dbaddr} {dbaddr} - URL 形式のデータベース名。SQL
データベースへ接続する際のオプション
(型、ホスト、データベース名、
ポート、ユーザ、パスワード)。
組み込みのテキストファイルサポートには関係ありません。
フォーマットは以下のようになります。
DBType:[//[DBUser[:DBPass]@]DBHost[:DBPort]]/DBName/
現在、サポートされている DBType の値は mysql, pgsql, msql,
solid, mssql, oracle, ibase です。
実際、ネーティブなライブラリのサポートは重要ではありません。しかし、
ODBC
ユーザは、サポートされる値の一つを指定する必要があります。
使用するデータベース型がサポートされていない場合、unknown
を代わりに使用することも可能です。

{dbmode} {dbmode} - 単語の記憶用 SQL データベース
モードを選択可能です。{dbmode} でとりうる値は
single、multi、crc あるいは crc-multi です。 single
を指定した場合、全ての単語が同じ
テーブルに保存されます。multi を選択した場合、
単語はその長さに応じて別々のテーブルに保存されます。通常は
"multi"
モードの方が通常高速ですが、データベース上でより多くのテーブルを
必要とします。"crc" モードが選択された場合、mnoGoSearch
は、単語の 代わりに CRC32 アルゴリズムで計算された 32
ビット整数の単語 ID を
保存します。このモードで必要なディスク容量はより小さいですが、
"single" および "multi" モードと比較してより高速です。
crc-multi は、"crc" モードと同じ記憶構造を
使用しますが、"multi"
モードのように単語長に応じて別々のデータベースに
単語を保存します。

{dbaddr} および {dbmode}
は、インデックス作成時に使用される
これらの選択肢に一致している必要があります。

成功した場合に mnogosearch エージェント
ID、失敗した場合に FALSE
を返します。この関数は、データベースパラメータを有するセッションを
生成します。

実際、これらの関数はデータベースへの接続をオープンする必要はなく、
よって、ログイン名やパスワードを確認しません。実際のデータベースへの
接続およびログイン/パスワード認証は、 |udm_find|
で行われます。

vim:ft=help:
