sprintf -- フォーマットされた文字列を返す

  string sprintf(string format [, mixed args [, mixed ...]])~

フォーマット文字列 {format}
に基づき生成された文字列を返します。

{format} フォーマット文字列は 0
個以上のディレクティブ（指示子）
により構成されます。ディレクティブには、そのまま結果にコピーされる
(% を除く) 通常の文字と変換指定子 (conversion specifications)
があり、
取り出される際はどちらもそれ自身がパラメータとなります。このことは
|sprintf| の場合だけでなく |printf| の場合も同様です。

各変換指定子は、パーセント記号 (%) の後に
これらの要素が一つ以上続いたものになります。
オプションの符号指定子。これは、 数値で符号 (-
あるいは +) を使用するよう指定します。
デフォルトでは、数値が負の場合の -
符号のみが使用されます。
この指定子により、正の数にも強制的に +
符号をつけることができます。 これは PHP 4.3.0
で追加されました。

オプションのパディング指定子。これは、
文字列が正しい長さになるまでどんな文字で埋めるかということを
指定します。これは空白かまたは 0 (文字 '0')
のいずれかです。デフォルトでは空白で埋められます。
これ以外のパディング文字を指定するには、その文字の前に
単一引用符 (') を置きます。 後述の例を参照ください。

オプションのアラインメント指定子。これは、
結果を左寄せまたは右寄せにしたい場合に指定します。
デフォルトは右寄せです。ここで -
文字を指定すると左寄せとなります。

オプションの数字。これは表示幅指定子です。
結果を（最低）何桁にするかを指定します。

オプションの精度指定子。これは、
浮動小数点数に対して数字を何桁まで表示するかを指定します。
文字列に対して使用した場合は、これは切り捨て位置として働きます。
この文字数を超える文字を切り捨てられます。

型指定子。引数を何の型として扱うかを指定します。
指定できる型を以下に示します。 % -
パーセント文字。引数は不要です。 b -
引数を整数として扱い、
バイナリの数値として表現します。 c -
引数を整数として扱い、その ASCII
値の文字として表現します。 d - 引数を整数として扱い、
10 進数として表現します。 e -
引数を科学記法として扱います (例 1.2e+2)。
精度の指定子は、PHP 5.2.1
以降では小数点以下の桁数を表します。
それより前のバージョンでは、有効数字の桁数
(ひとつ小さい値) を意味していました。 u -
引数を整数として扱い、符号無しの 10
進数として表現します。 f - 引数を double として扱い、
浮動小数点数として表現します。 F - 引数を float
として扱い、 浮動小数点数として表現します
(ロケールに依存しません)。 PHP 4.3.10 および PHP 5.0.3
以降で使用可能です。 o - 引数を整数として扱い、 8
進数として表現します。 s -
引数を文字列として扱い、表現します。 x -
引数を整数として扱い、16 進数として
(小文字で)表現します。 X - 引数を整数として扱い、16
進数として (大文字で)表現します。

フォーマット文字列における引数の 番号付け/交換
をサポートしています。以下に例を示します。
引数の交換

<?php >
  $format = 'There are %d monkeys in the %s';
  printf($format, $num, $location);
?>



この出力は、"There are 5 monkeys in the tree"
のようになります。
ここで、フォーマット文字列が別のファイルにある場合を考えてみましょう。
これは、出力を国際化したりする場合に行われる可能性があります。
たとえばフォーマット文字列が次のように書き換えられたとすると、
引数の交換

<?php >
  $format = 'The %s contains %d monkeys';
  printf($format, $num, $location);
?>



ここで、問題が発生します。フォーマット文字列における置換指示子の順番は、
コードにおける引数の順番と一致していません。
だからといってコードを変更するのではなく、
むしろ置換指示子が参照するフォーマット文字列のほうで指示を行う方が望ましいでしょう。
フォーマット文字列を次のように書き換えてみましょう。
引数の交換

<?php >
  $format = 'The %2$s contains %1$d monkeys';
  printf($format, $num, $location);
?>



こうすることによるもうひとつの利点は、
同じ置換指示子を複数回使用する際にコードに引数を追加せずにすむことです。
例えば、次のようになります。 引数の交換

<?php >
  $format = 'The %2$s contains %1$d monkeys.
             That\'s a nice %2$s full of %1$d monkeys.';
  printf($format, $num, $location);
?>





{args}

{...}

フォーマット文字列 {format}
に基づき生成された文字列を返します。

バージョン 説明 4.0.6 引数の 番号付け/交換
をサポートするようになりました。

|printf| のさまざまな例

<?php >
  $n =  43951789;
  $u = -43951789;
  $c = 65; // ASCII コードの 65 は 'A' です
  
  // %% に注目しましょう。これは、リテラル '%' を文字として出力します
  printf("%%b = '%b'\n", $n); // 2 進表現
  printf("%%c = '%c'\n", $c); // ascii 文字を表示します。chr() 関数と同じです
  printf("%%d = '%d'\n", $n); // 標準の整数表現
  printf("%%e = '%e'\n", $n); // 科学記法
  printf("%%u = '%u'\n", $n); // 正の整数の、符号なし整数表現
  printf("%%u = '%u'\n", $u); // 負の整数の、符号なし整数表現
  printf("%%f = '%f'\n", $n); // 浮動小数点表現
  printf("%%o = '%o'\n", $n); // 8 進表現
  printf("%%s = '%s'\n", $n); // 文字列表現
  printf("%%x = '%x'\n", $n); // 16 進表現 (小文字)
  printf("%%X = '%X'\n", $n); // 16 進表現 (大文字)
  
  printf("%%+d = '%+d'\n", $n); // 正の整数に符号指定子を使用
  printf("%%+d = '%+d'\n", $u); // 負の整数に符号指定子を使用
?>

上の例の出力は以下となります。

  %b = '10100111101010011010101101'
  %c = 'A'
  %d = '43951789'
  %e = '4.39518e+7'
  %u = '43951789'
  %u = '4251015507'
  %f = '43951789.000000'
  %o = '247523255'
  %s = '43951789'
  %x = '29ea6ad'
  %X = '29EA6AD'
  %+d = '+43951789'
  %+d = '-43951789'

|printf| の文字列指定子

<?php >
  $s = 'monkey';
  $t = 'many monkeys';
  
  printf("[%s]\n",      $s); // 標準の文字列出力
  printf("[%10s]\n",    $s); // 空白を使用して右詰め
  printf("[%-10s]\n",   $s); // 空白を使用して左詰め
  printf("[%010s]\n",   $s); // ゼロ埋めは文字列でも可能です
  printf("[%'#10s]\n",  $s); // ゼロの代わりに独自の文字 '#' で埋めます
  printf("[%10.10s]\n", $t); // 左詰めを行い、10 文字以上は切り捨てます
?>

上の例の出力は以下となります。

  [monkey]
  [    monkey]
  [monkey    ]
  [0000monkey]
  [####monkey]
  [many monke]

|sprintf|: 整数のゼロ埋め

<?php >
  $isodate = sprintf("%04d-%02d-%02d", $year, $month, $day);
?>



|sprintf|: 通貨をフォーマットする例

<?php >
  $money1 = 68.75;
  $money2 = 54.35;
  $money = $money1 + $money2;
  // echo $money は "123.1" を出力します。
  $formatted = sprintf("%01.2f", $money);
  // echo $formatted は "123.10"を出力します
?>



|sprintf|: 科学記法

<?php >
  $number = 362525200;
  
  echo sprintf("%.3e", $number); // 3.625e+8 を出力します
?>



|printf| |sscanf| |fscanf| |vsprintf| |number_format|

vim:ft=help:
