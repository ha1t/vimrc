db2_execute -- プリペアドステートメントを実行する

  bool db2_execute(resource stmt [, array parameters])~

|db2_execute| は、 |db2_prepare| で準備された SQL
文を実行します。

SQL 文が結果セットを返す場合、例えば SELECT 文であったり
結果セットを返すストアドプロシージャの CALL
であったりした場合には、 stmt
から結果の行を配列として取得することができます。
取得には |db2_fetch_assoc|、 |db2_fetch_both| あるいは
|db2_fetch_array| を使用します。 あるいは、|db2_fetch_row|
を使用して 結果セットポインタを次の行に移動させ、
|db2_result|
で行の内容をその都度取得することも可能です。

|db2_exec| の代わりに |db2_prepare| および |db2_execute|
を使用することの利点については、 |db2_prepare|
での簡単な説明を参照ください。

{stmt} |db2_prepare| が返すプリペアドステートメント。

{parameters}
プリペアドステートメント内に含まれるパラメータマーカに対応する、
入力パラメータの配列。

成功した場合に TRUE を、失敗した場合に FALSE
を返します。

パラメータマーカを使用した SQL 文の準備と実行
以下の例では、4 つのパラメータマーカを含む INSERT
文を準備し、
入力値の配列を含む配列を順に処理しながら |db2_execute|
に値を渡します。

<?php >
  $pet = array(0, 'cat', 'Pook', 3.2);
  
  $insert = 'INSERT INTO animals (id, breed, name, weight)
      VALUES (?, ?, ?, ?)';
  
  $stmt = db2_prepare($conn, $insert);
  if ($stmt) {
      $result = db2_execute($stmt, $pet);
      if ($result) {
          print "新しいペットの追加に成功しました。";
      }
  }
?>

上の例の出力は以下となります。

  新しいペットの追加に成功しました。

OUT パラメータを使用したストアドプロシージャのコール
以下の例では、まずひとつの OUT
パラメータをパラメータマーカで受け取る CALL
文を準備し、|db2_bind_param| を使用して PHP 変数 $my_pets
をそのパラメータにバインドし、 |db2_execute| で CALL
文を実行します。 ストアドプロシージャの CALL
終了後は、$num_pets にはストアドプロシージャの OUT
パラメータに返された値が反映されています。

<?php >
  $num_pets = 0;
  $res = db2_prepare($conn, "CALL count_my_pets(?)");
  $rc = db2_bind_param($res, 1, "num_pets", DB2_PARAM_OUT);
  $rc = db2_execute($res);
  print "私の飼っているペットの数は $num_pets です!";
?>

上の例の出力は以下となります。

  私の飼っているペットの数は 7 です!

XML データを SQL の結果セットとして返す 次の例は、XML
カラムに格納されたデータの扱い方を、SAMPLE
データベースを用いて説明するものです。ごく単純な
SQL/XML を使用して、この例では XML
ドキュメントのいくつかのノードを みなさんおなじみの
SQL 結果セット形式で返します。

<?php >
  $conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");
  
  $query = 'SELECT * FROM XMLTABLE(
      XMLNAMESPACES (DEFAULT \'http://posample.org\'),
      \'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo\'
      COLUMNS
      "CID" VARCHAR (50) PATH \'@Cid\',
      "NAME" VARCHAR (50) PATH \'name\',
      "PHONE" VARCHAR (50) PATH \'phone [ @type = "work"]\'
      ) AS T
      WHERE NAME = ?
      ';
  
  $stmt = db2_prepare($conn, $query);
  
  $name = 'Kathy Smith';
  
  if ($stmt) {
      db2_bind_param($stmt, 1, "name", DB2_PARAM_IN);
      db2_execute($stmt);
  
      while($row = db2_fetch_object($stmt)){
      printf("$row->CID     $row->NAME     $row->PHONE\n");
      }
  }
  db2_close($conn);
?>

上の例の出力は以下となります。

  1000     Kathy Smith     416-555-1358
  1001     Kathy Smith     905-555-7258

XML データの "JOIN" 次の例は、SAMPLE データベースの 2
つの異なる XML
カラムに格納されたドキュメントを使用します。 まず、2
つの異なるカラムの XML ドキュメントをもとにして 2
つのテンポラリテーブルを作成します。
そして特定の顧客の配送情報を SQL
結果セットで返します。

<?php >
  $conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");
  
  $query = '
  SELECT A.CID, A.NAME, A.PHONE, C.PONUM, C.STATUS
  FROM
  XMLTABLE(
  XMLNAMESPACES (DEFAULT \'http://posample.org\'),
  \'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo\'
  COLUMNS
  "CID" BIGINT PATH \'@Cid\',
  "NAME" VARCHAR (50) PATH \'name\',
  "PHONE" VARCHAR (50) PATH \'phone [ @type = "work"]\'
  ) as A,
  PURCHASEORDER AS B,
  XMLTABLE (
  XMLNAMESPACES (DEFAULT \'http://posample.org\'),
  \'db2-fn:xmlcolumn("PURCHASEORDER.PORDER")/PurchaseOrder\'
  COLUMNS
  "PONUM"  BIGINT PATH \'@PoNum\',
  "STATUS" VARCHAR (50) PATH \'@Status\'
  ) as C
  WHERE A.CID = B.CUSTID AND
      B.POID = C.PONUM AND
      A.NAME = ?
  ';
  
  $stmt = db2_prepare($conn, $query);
  
  $name = 'Kathy Smith';
  
  if ($stmt) {
      db2_bind_param($stmt, 1, "name", DB2_PARAM_IN);
      db2_execute($stmt);
  
      while($row = db2_fetch_object($stmt)){
      printf("$row->CID     $row->NAME     $row->PHONE     $row->PONUM     $row->STATUS\n");
      }
  }
  
  db2_close($conn);
?>

上の例の出力は以下となります。

  1001     Kathy Smith     905-555-7258     5002     Shipped

大きな XML ドキュメントの一部を SQL データとして返す
次の例は、SAMPLE データベースのドキュメント
PRODUCT.DESCRIPTION の一部を使用します。これは、商品の説明
(XML データ) および価格情報 (SQL データ) を含む XML
ドキュメントを返します。

<?php >
  $conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");
  
  $query = '
  SELECT
  XMLSERIALIZE(
  XMLQUERY(\'
      declare boundary-space strip;
      declare default element namespace "http://posample.org";
      <promoList> {
      for $prod in $doc/product
      where $prod/description/price < 10.00
      order by $prod/description/price ascending
      return(
          <promoitem> {
          $prod,
          <startdate> {$start} </startdate>,
          <enddate> {$end} </enddate>,
          <promoprice> {$promo} </promoprice>
              } </promoitem>
      )
      } </promoList>
  \' passing by ref DESCRIPTION AS "doc",
  PROMOSTART as "start",
  PROMOEND as "end",
  PROMOPRICE as "promo"
  RETURNING SEQUENCE)
  AS CLOB (32000))
  AS NEW_PRODUCT_INFO
  FROM PRODUCT
  WHERE PID = ?
  ';
  
  $stmt = db2_prepare($conn, $query);
  
  $pid = "100-100-01";
  
  if ($stmt) {
      db2_bind_param($stmt, 1, "pid", DB2_PARAM_IN);
      db2_execute($stmt);
  
      while($row = db2_fetch_array($stmt)){
      printf("$row[0]\n");
      }
  }
  
  db2_close($conn);
?>

上の例の出力は以下となります。

  <promoList xmlns="http://posample.org">
      <promoitem>
      <product pid="100-100-01">
          <description>
              <name>Snow Shovel, Basic 22 inch</name>
              <details>Basic Snow Shovel, 22 inches wide, straight handle with D-Grip</details>
              <price>9.99</price>
              <weight>1 kg</weight>
          </description>
      </product>
      <startdate>2004-11-19</startdate>
      <enddate>2004-12-19</enddate>
      <promoprice>7.25</promoprice>
      </promoitem>
  </promoList>



|db2_exec| |db2_fetch_array| |db2_fetch_assoc| |db2_fetch_both|
|db2_fetch_row| |db2_prepare| |db2_result|

vim:ft=help:
